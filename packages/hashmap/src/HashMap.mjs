// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Hamt from "./impl/Hamt.mjs";
import * as Curry from "@rescript/std/lib/es6/curry.js";

function make(hasher) {
  return {
          root: Hamt.BitmapIndexed.make(undefined),
          count: 0,
          hasher: hasher
        };
}

function get(param, k) {
  return Hamt.BitmapIndexed.find(param.root, 0, Curry._1(param.hasher, k), k);
}

function set(m, k, v) {
  var hasher = m.hasher;
  var root = m.root;
  var root$p = Hamt.BitmapIndexed.assoc(root, 0, hasher, Curry._1(hasher, k), k, v);
  if (root$p === root) {
    return m;
  } else {
    return {
            root: root$p,
            count: m.count + 1 | 0,
            hasher: m.hasher
          };
  }
}

function remove(m, k) {
  var hasher = m.hasher;
  var root = m.root;
  var root$p = Hamt.BitmapIndexed.dissoc(root, 0, Curry._1(hasher, k), k);
  if (root$p !== undefined) {
    if (root$p === root) {
      return m;
    } else {
      return {
              root: root$p,
              count: m.count - 1 | 0,
              hasher: m.hasher
            };
    }
  } else {
    return make(hasher);
  }
}

function size(m) {
  return m.count;
}

export {
  make ,
  get ,
  set ,
  remove ,
  size ,
  
}
/* No side effect */
